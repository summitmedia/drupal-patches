diff --git a/expire.admin.inc b/expire.admin.inc
index b6f19b6..3ac66e1 100644
--- a/expire.admin.inc
+++ b/expire.admin.inc
@@ -192,6 +192,179 @@ function expire_admin_settings_form() {
     '#default_value' => variable_get('expire_node_custom_pages'),
   );
 
+  // BLOCK SETTINGS.
+  $form['tabs']['block'] = array(
+    '#type' => 'fieldset',
+    '#title' => t('Block expiration'),
+    '#group' => 'tabs',
+    '#weight' => 1,
+  );
+
+  $form['tabs']['block']['actions'] = array(
+    '#type' => 'fieldset',
+    '#title' => t('Block actions'),
+  );
+
+  $form['tabs']['block']['actions']['expire_block_actions'] = array(
+    '#type' => 'checkboxes',
+    '#description' => t('Page cache for block will be flushed after selected actions. Blocks structure change will purge cache for all blocks'),
+    '#options' => array(
+      EXPIRE_BLOCK_INSERT => t('Block insert'),
+      EXPIRE_BLOCK_UPDATE => t('Block update'),
+      EXPIRE_BLOCK_DELETE => t('Block delete'),
+      BLOCKS_STRUCTURE_CHANGE => t('Blocks structure change'),
+    ),
+    '#default_value' => variable_get('expire_block_actions', array()),
+  );
+
+  $form['tabs']['block']['expire'] = array(
+    '#type' => 'fieldset',
+    '#title' => t('What URLs should be expired when block action is triggered?'),
+  );
+
+  $form['tabs']['block']['expire']['expire_block_front_page'] = array(
+    '#type' => 'checkbox',
+    '#title' => t('Front page'),
+    '#description' => t('Expire url of the site front page'),
+    '#default_value' => variable_get('expire_block_front_page', EXPIRE_BLOCK_FRONT_PAGE),
+  );
+
+  $form['tabs']['block']['expire']['expire_merge_blocks_settings'] = array(
+    '#type' => 'checkbox',
+    '#title' => t('Merge blocks individual settings'),
+    '#description' => t('Merge blocks custom settings'),
+    '#default_value' => variable_get('expire_merge_blocks_settings', EXPIRE_MERGE_BLOCKS_SETTINGS),
+  );
+
+  $form['tabs']['block']['expire']['expire_block_custom'] = array(
+    '#type' => 'checkbox',
+    '#title' => t('Custom pages'),
+    '#description' => t('Expire user-defined custom urls.'),
+    '#default_value' => variable_get('expire_block_custom', EXPIRE_BLOCK_CUSTOM),
+  );
+
+  $form['tabs']['block']['expire']['expire_block_custom_pages'] = array(
+    '#type' => 'textarea',
+    '#title' => t('Enter custom URLs'),
+    '#description' => 'Specify pages by using their paths. Enter one path per line. The \'*\' character is a wildcard. Example paths are <em class="placeholder">blog</em> for the blog page and <em class="placeholder">blog/*</em> for every personal blog. <em class="placeholder">&lt;front&gt;</em> is the front page.',
+    '#states' => array(
+      'visible' => array(
+        ':input[name="expire_block_custom"]' => array('checked' => TRUE),
+      ),
+    ),
+    '#default_value' => variable_get('expire_block_custom_pages'),
+  );
+
+  // TAXONOMY TERM SETTINGS.
+  if (module_exists('taxonomy')) {
+    $form['tabs']['taxonomy_term'] = array(
+      '#type' => 'fieldset',
+      '#title' => t('Taxonomy term expiration'),
+      '#group' => 'tabs',
+      '#weight' => 2,
+    );
+
+    $form['tabs']['taxonomy_term']['override'] = array(
+      '#type' => 'fieldset',
+      '#title' => t('Taxonomy term settings per vocabulary'),
+    );
+
+    $form['tabs']['taxonomy_term']['override']['info'] = array(
+      '#type' => 'item',
+      '#markup' => t('Please note that you may override this settings for each vocabulary on the vocabulary configuration page.'),
+    );
+
+    $form['tabs']['taxonomy_term']['actions'] = array(
+      '#type' => 'fieldset',
+      '#title' => t('Taxonomy term actions'),
+    );
+
+    $form['tabs']['taxonomy_term']['actions']['expire_taxonomy_term_actions'] = array(
+      '#type' => 'checkboxes',
+      '#description' => t('Page cache for taxonomy term will be flushed after selected actions.'),
+      '#options' => array(
+        EXPIRE_TAXONOMY_TERM_INSERT => t('Taxonomy term insert'),
+        EXPIRE_TAXONOMY_TERM_UPDATE => t('Taxonomy term update'),
+        EXPIRE_TAXONOMY_TERM_DELETE => t('Taxonomy term delete'),
+      ),
+      '#default_value' => variable_get('expire_taxonomy_term_actions', array()),
+    );
+
+    $form['tabs']['taxonomy_term']['expire'] = array(
+      '#type' => 'fieldset',
+      '#title' => t('What URLs should be expired when taxonomy term action is triggered?'),
+    );
+
+    $form['tabs']['taxonomy_term']['expire']['expire_taxonomy_term_front_page'] = array(
+      '#type' => 'checkbox',
+      '#title' => t('Front page'),
+      '#description' => t('Expire url of the site front page'),
+      '#default_value' => variable_get('expire_taxonomy_term_front_page', EXPIRE_TAXONOMY_TERM_FRONT_PAGE),
+    );
+
+    $form['tabs']['taxonomy_term']['expire']['expire_taxonomy_term_taxonomy_term_page'] = array(
+      '#type' => 'checkbox',
+      '#title' => t('Taxonomy term page'),
+      '#description' => t('Expire url of the expiring taxonomy term.'),
+      '#default_value' => variable_get('expire_taxonomy_term_taxonomy_term_page', EXPIRE_TAXONOMY_TERM_TAXONOMY_TERM_PAGE),
+    );
+
+    if (module_exists('node_reference') || module_exists('user_reference') || module_exists('entityreference')) {
+      $form['tabs']['taxonomy_term']['expire']['expire_taxonomy_term_reference_pages'] = array(
+        '#type' => 'checkbox',
+        '#title' => t('Taxonomy term reference pages'),
+        '#description' => t('Expire urls of entities which are referenced from the expiring taxonomy term.'),
+        '#default_value' => variable_get('expire_taxonomy_term_reference_pages', EXPIRE_TAXONOMY_TERM_REFERENCE_PAGES),
+      );
+
+      if (module_exists('field_collection')) {
+        $form['tabs']['taxonomy_term']['expire']['expire_taxonomy_term_reference_field_collection_pages'] = array(
+          '#type' => 'checkbox',
+          '#title' => t('Traverse references attached to field collections'),
+          '#description' => t('Expire urls of entities which are referenced from field collections attached to the expiring taxonomy_term.'),
+          '#default_value' => variable_get('expire_taxonomy_term_reference_field_collection_pages', EXPIRE_TAXONOMY_TERM_REFERENCE_FC_PAGES),
+          '#states' => array(
+            'visible' => array(
+              ':input[name="expire_taxonomy_term_reference_pages"]' => array('checked' => TRUE),
+            ),
+          ),
+        );
+      }
+    }
+
+    $form['tabs']['taxonomy_term']['expire']['expire_taxonomy_term_custom'] = array(
+      '#type' => 'checkbox',
+      '#title' => t('Custom pages'),
+      '#description' => t('Expire user-defined custom urls.'),
+      '#default_value' => variable_get('expire_taxonomy_term_custom', EXPIRE_TAXONOMY_TERM_CUSTOM),
+    );
+
+    $form['tabs']['taxonomy_term']['expire']['expire_taxonomy_term_custom_pages'] = array(
+      '#type' => 'textarea',
+      '#title' => t('Enter custom URLs'),
+      '#description' => t('Enter one relative URL per line. It can be the path of a taxonomy term (e.g. !example1) or of any alias (e.g. !example2). However, it has to be the final URL, not a redirect (use the !link1 and !link2 modules).', array(
+          '!example1' => '<strong>taxonomy/term/[taxonomy_term:tid]</strong>',
+          '!example2' => '<strong>my/path</strong>',
+          '!link1' => l('Global Redirect', 'https://drupal.org/project/globalredirect'),
+          '!link2' => l('Redirect', 'https://drupal.org/project/redirect')
+        )) . '<br/>'
+        . t('If you want to match a path with any ending, add "|wildcard" to the end of the line (see !link1 for details). Example: !example1 will match !example1a, but also !example1b, !example1c, etc.', array(
+          '!link1' => l('function cache_clear_all', 'https://api.drupal.org/api/drupal/includes%21cache.inc/function/cache_clear_all/7'),
+          '!example1' => '<strong>my/path|wildcard</strong>',
+          '!example1a' => '<strong>my/path</strong>',
+          '!example1b' => '<strong>my/path/one</strong>',
+          '!example1c' => '<strong>my/path/two</strong>'
+        )) . '<br/>'
+        . t('You may use tokens here.'),
+      '#states' => array(
+        'visible' => array(
+          ':input[name="expire_taxonomy_term_custom"]' => array('checked' => TRUE),
+        ),
+      ),
+      '#default_value' => variable_get('expire_taxonomy_term_custom_pages'),
+    );
+  }
+
 
   // COMMENT SETTINGS.
   if (module_exists('comment')) {
@@ -199,7 +372,7 @@ function expire_admin_settings_form() {
       '#type' => 'fieldset',
       '#title' => t('Comment expiration'),
       '#group' => 'tabs',
-      '#weight' => 2,
+      '#weight' => 3,
     );
 
     $form['tabs']['comment']['override'] = array(
@@ -325,7 +498,7 @@ function expire_admin_settings_form() {
     '#type' => 'fieldset',
     '#title' => t('User expiration'),
     '#group' => 'tabs',
-    '#weight' => 3,
+    '#weight' => 4,
   );
 
   $form['tabs']['user']['actions'] = array(
@@ -424,7 +597,7 @@ function expire_admin_settings_form() {
       '#type' => 'fieldset',
       '#title' => t('File expiration'),
       '#group' => 'tabs',
-      '#weight' => 4,
+      '#weight' => 5,
     );
 
     $form['tabs']['file']['actions'] = array(
@@ -490,7 +663,7 @@ function expire_admin_settings_form() {
       '#type' => 'fieldset',
       '#title' => t('Votingapi expiration'),
       '#group' => 'tabs',
-      '#weight' => 5,
+      '#weight' => 6,
     );
 
     $form['tabs']['votingapi']['actions'] = array(
@@ -556,7 +729,7 @@ function expire_admin_settings_form() {
       '#type' => 'fieldset',
       '#title' => t('Menu links expiration'),
       '#group' => 'tabs',
-      '#weight' => 6,
+      '#weight' => 7,
     );
 
     $form['tabs']['menu_links']['actions'] = array(
@@ -764,3 +937,75 @@ function expire_node_settings_form(&$form) {
   // Attach js.
   $form['#attached']['js'][] = drupal_get_path('module', 'expire') . '/js/expire.admin.js';
 }
+
+/**
+ * Settings form for a taxonomy vocabulary.
+ */
+function expire_taxonomy_term_settings_form(&$form) {
+
+  if (empty($form['#vocabulary']->machine_name)) {
+    return;
+  }
+
+  $vocabulary = $form['#vocabulary']->machine_name;
+
+  $form['expire'] = array(
+    '#type' => 'fieldset',
+    '#title' => t('Cache Expiration'),
+    '#collapsible' => TRUE,
+    '#collapsed' => TRUE,
+    '#group' => 'additional_settings',
+  );
+
+  // TAXONOMY TERM SETTINGS.
+  $form['expire']['expire_taxonomy_term_override_defaults'] = array(
+    '#type' => 'checkbox',
+    '#title' => t('Override default settings for this vocabulary'),
+    '#default_value' => variable_get('expire_taxonomy_term_override_defaults_' . $vocabulary),
+  );
+
+  // Copy here settings from default settings form.
+  $settings_form = expire_admin_settings_form();
+  $form['expire']['taxonomy_term_actions'] = $settings_form['tabs']['taxonomy_term']['actions'];
+  $form['expire']['taxonomy_term_expires'] = $settings_form['tabs']['taxonomy_term']['expire'];
+
+  // Display fieldsets with settings only if they should be overriden.
+  $form['expire']['taxonomy_term_actions']['#states'] = array(
+    'visible' => array(':input[name="expire_taxonomy_term_override_defaults"]' => array('checked' => TRUE)),
+  );
+  $form['expire']['taxonomy_term_expires']['#states'] = array(
+    'visible' => array(':input[name="expire_taxonomy_term_override_defaults"]' => array('checked' => TRUE)),
+  );
+
+  // Change tab title to more suitable here.
+  $form['expire']['taxonomy_term_expires']['#title'] = t('What pages should be expired when taxonomy term action is triggered?');
+
+  // Set default settings for this vocabulary.
+  $form['expire']['taxonomy_term_actions']['expire_taxonomy_term_actions']['#default_value'] =
+    variable_get('expire_taxonomy_term_actions_' . $vocabulary, array());
+
+  $form['expire']['taxonomy_term_expires']['expire_taxonomy_term_front_page']['#default_value'] =
+    variable_get('expire_taxonomy_term_front_page_' . $vocabulary, EXPIRE_TAXONOMY_TERM_FRONT_PAGE);
+
+  $form['expire']['taxonomy_term_expires']['expire_taxonomy_term_taxonomy_term_page']['#default_value'] =
+    variable_get('expire_taxonomy_term_taxonomy_term_page_' . $vocabulary, EXPIRE_TAXONOMY_TERM_TAXONOMY_TERM_PAGE);
+
+  if (module_exists('node_reference') || module_exists('user_reference') || module_exists('entityreference')) {
+    $form['expire']['taxonomy_term_expires']['expire_taxonomy_term_reference_pages']['#default_value'] =
+      variable_get('expire_taxonomy_term_reference_pages_' . $vocabulary, EXPIRE_TAXONOMY_TERM_REFERENCE_PAGES);
+
+    if (module_exists('field_collection')) {
+      $form['expire']['taxonomy_term_expires']['expire_taxonomy_term_reference_field_collection_pages']['#default_value'] =
+        variable_get('expire_taxonomy_term_reference_field_collection_pages_' . $vocabulary, EXPIRE_TAXONOMY_TERM_REFERENCE_FC_PAGES);
+    }
+  }
+
+  $form['expire']['taxonomy_term_expires']['expire_taxonomy_term_custom']['#default_value'] =
+    variable_get('expire_taxonomy_term_custom_' . $vocabulary, EXPIRE_TAXONOMY_TERM_CUSTOM);
+
+  $form['expire']['taxonomy_term_expires']['expire_taxonomy_term_custom_pages']['#default_value'] =
+    variable_get('expire_taxonomy_term_custom_pages_' . $vocabulary);
+
+  // Attach js.
+  $form['#attached']['js'][] = drupal_get_path('module', 'expire') . '/js/expire.admin.js';
+}
diff --git a/expire.drush.inc b/expire.drush.inc
index 6724ab8..b5103e2 100644
--- a/expire.drush.inc
+++ b/expire.drush.inc
@@ -56,6 +56,21 @@ function expire_drush_command() {
     'callback' => 'drush_expire_node'
   );
 
+  // Expire taxonomy term objects.
+  $items['expire-term'] = array(
+    'description' => 'Expire a taxonomy term by term ID.',
+    'arguments' => array(
+      'tids' => 'Numeric term ids to expire separated by spaces.',
+    ),
+    'examples' => array(
+      'drush expire-term 2' => 'Expire single taxonomy term by term ID.',
+      'drush xp-term 2 24 612' => 'Expire multiple taxonomy terms by term IDs.',
+    ),
+    'aliases' => array('xp-term'),
+    'drupal dependencies' => array('expire'),
+    'callback' => 'drush_expire_term',
+  );
+
   // Expire user objects.
   $items['expire-user'] = array(
     'description' => 'Expire a user by user ID.',
@@ -120,7 +135,7 @@ function drush_expire_internal_path() {
       $internal_paths[] = $path;
     }
   }
- 
+
   // Expire internal paths.
   ExpireAPI::executeExpiration($internal_paths);
 }
@@ -133,6 +148,13 @@ function drush_expire_node() {
 }
 
 /**
+ * Callback for expire-term drush command.
+ */
+function drush_expire_term() {
+  _drush_expire_entity('taxonomy_term');
+}
+
+/**
  * Callback for expire-user drush command.
  */
 function drush_expire_user() {
diff --git a/expire.info b/expire.info
index d57f3c5..5338cc8 100644
--- a/expire.info
+++ b/expire.info
@@ -11,6 +11,8 @@ files[] = includes/expire.domain.inc
 files[] = includes/expire.interface.inc
 files[] = includes/expire.menu_link.inc
 files[] = includes/expire.node.inc
+files[] = includes/expire.block.inc
+files[] = includes/expire.taxonomy_term.inc
 files[] = includes/expire.user.inc
 files[] = includes/expire.votingapi.inc
 files[] = includes/expire.file.inc
diff --git a/expire.module b/expire.module
index 7d7b1e6..28a8eea 100644
--- a/expire.module
+++ b/expire.module
@@ -26,6 +26,17 @@ define('EXPIRE_NODE_INSERT', 1);
 define('EXPIRE_NODE_UPDATE', 2);
 define('EXPIRE_NODE_DELETE', 3);
 
+// Block actions.
+define('EXPIRE_BLOCK_INSERT', 1);
+define('EXPIRE_BLOCK_UPDATE', 2);
+define('EXPIRE_BLOCK_DELETE', 3);
+define('BLOCKS_STRUCTURE_CHANGE', 4);
+
+// Taxonomy term actions.
+define('EXPIRE_TAXONOMY_TERM_INSERT', 1);
+define('EXPIRE_TAXONOMY_TERM_UPDATE', 2);
+define('EXPIRE_TAXONOMY_TERM_DELETE', 3);
+
 // Comment actions.
 define('EXPIRE_COMMENT_INSERT'   , 1);
 define('EXPIRE_COMMENT_UPDATE'   , 2);
@@ -64,6 +75,15 @@ define('EXPIRE_NODE_TERM_PAGES'                 , FALSE);
 define('EXPIRE_NODE_REFERENCE_PAGES'            , FALSE);
 define('EXPIRE_NODE_REFERENCE_FC_PAGES'         , FALSE);
 define('EXPIRE_NODE_CUSTOM'                     , FALSE);
+define('EXPIRE_BLOCK_FRONT_PAGE'                , FALSE);
+define('EXPIRE_MERGE_BLOCKS_SETTINGS'           , FALSE);
+define('EXPIRE_BLOCK_CUSTOM'                    , FALSE);
+define('EXPIRE_TAXONOMY_TERM_FRONT_PAGE'        , FALSE);
+define('EXPIRE_TAXONOMY_TERM_TAXONOMY_TERM_PAGE', TRUE);
+define('EXPIRE_TAXONOMY_TERM_TERM_PAGES'        , FALSE);
+define('EXPIRE_TAXONOMY_TERM_REFERENCE_PAGES'   , FALSE);
+define('EXPIRE_TAXONOMY_TERM_REFERENCE_FC_PAGES', FALSE);
+define('EXPIRE_TAXONOMY_TERM_CUSTOM'            , FALSE);
 define('EXPIRE_COMMENT_FRONT_PAGE'              , FALSE);
 define('EXPIRE_COMMENT_COMMENT_PAGE'            , TRUE);
 define('EXPIRE_COMMENT_REFERENCE_PAGES'         , FALSE);
@@ -133,6 +153,35 @@ function expire_node_delete($node) {
 }
 
 /**
+ * Implements hook_form_FORM_ID_alter().
+ */
+function expire_form_taxonomy_form_vocabulary_alter(&$form, &$form_state) {
+  module_load_include('admin.inc', 'expire');
+  expire_taxonomy_term_settings_form($form, $form_state);
+}
+
+/**
+ * Implements hook_taxonomy_term_insert().
+ */
+function expire_taxonomy_term_insert($taxonomy_term) {
+  expire_execute_expiration('taxonomy_term', $taxonomy_term, EXPIRE_TAXONOMY_TERM_INSERT);
+}
+
+/**
+ * Implements hook_taxonomy_term_update().
+ */
+function expire_taxonomy_term_update($taxonomy_term) {
+  expire_execute_expiration('taxonomy_term', $taxonomy_term, EXPIRE_TAXONOMY_TERM_UPDATE);
+}
+
+/**
+ * Implements hook_taxonomy_term_delete().
+ */
+function expire_taxonomy_term_delete($taxonomy_term) {
+  expire_execute_expiration('taxonomy_term', $taxonomy_term, EXPIRE_TAXONOMY_TERM_DELETE);
+}
+
+/**
  * Implements hook_comment_insert().
  */
 function expire_comment_insert($comment) {
@@ -310,3 +359,229 @@ function _expire_load_single_entity($entity_type, $entity_id) {
 function expire_print_r($data) {
   return str_replace('    ', '&nbsp;&nbsp;&nbsp;&nbsp;', nl2br(htmlentities(print_r($data, TRUE))));
 }
+
+
+/**
+ * Implements hook_form_alter().
+ */
+function expire_form_alter(&$form, &$form_state, $form_id) {
+  $status = _check_blocks_execution_status($form_id);
+  if (!$status) {
+    return;
+  }
+  $needed_form_id = array(
+    'block_admin_configure',
+    'block_add_block_form',
+    'block_admin_display_form',
+    'block_custom_block_delete',
+  );
+  if (in_array($form_id, $needed_form_id)) {
+    if (
+      variable_get('expire_merge_blocks_settings', EXPIRE_MERGE_BLOCKS_SETTINGS) &&
+      $form_id !== 'block_admin_display_form'
+    ) {
+      $block_id = $form["delta"]["#value"];
+      $form["visibility"]["purge_cache"] = array(
+        '#type' => 'fieldset',
+        '#title' => t('Block expiration'),
+        '#collapsible' => TRUE,
+        '#collapsed' => TRUE,
+        '#group' => 'visibility',
+        '#weight' => 40,
+        'purged_nodes_ct' => array(
+          '#type' => 'checkboxes',
+          '#options' => node_type_get_names(),
+          '#default_value' => variable_get("expire_block_ct_{$block_id}") ? variable_get("expire_block_ct_{$block_id}") : '',
+          '#title' => t('Purge all nodes for the selected CTs:'),
+        ),
+        'purged_pages' => array(
+          '#type' => 'textarea',
+          '#title' => t('WHAT URLS SHOULD BE EXPIRED WHEN BLOCK ACTION IS TRIGGERED?'),
+          '#default_value' => variable_get("expire_block_{$block_id}") ? variable_get("expire_block_{$block_id}") : '',
+          '#description' => 'Specify pages by using their paths. Enter one path per line. The \'*\' character is a wildcard. Example paths are <em class="placeholder">blog</em> for the blog page and <em class="placeholder">blog/*</em> for every personal blog. <em class="placeholder">&lt;front&gt;</em> is the front page.',
+        ),
+      );
+      $form['#validate'][] = 'expire_form_block_admin_validation_handler';
+    }
+    $form['#submit'][]  = 'expire_form_block_admin_submit_handler';
+  }
+}
+
+/**
+ * Form validation handler for expire_form_alter().
+ *
+ * @see expire_form_alter()
+ */
+function expire_form_block_admin_validation_handler(&$form, &$form_state) {
+  if (!empty($form_state['input']['purged_pages'])) {
+    $user_input = trim($form_state['input']['purged_pages']);
+    $purged_pages = preg_split( '/\r\n|\r|\n/', $user_input);
+    foreach ($purged_pages as $key => $path) {
+      $normal_path = drupal_get_normal_path($path);
+      // Replace a wildcard * to % to check directly against menu_router table.
+      $normal_path = str_replace('*', '%', $normal_path);
+      if (!_expire_check_if_valid_path($normal_path)){
+        form_set_error('visibility][purge_cache', t('Then next purged path is not valid: !path', array('!path' => $path)));
+      }
+    }
+  }
+}
+
+/**
+ * Form submission handler for expire_form_alter().
+ *
+ * @see expire_form_alter()
+ */
+function expire_form_block_admin_submit_handler(&$form, &$form_state) {
+  $form_id = $form["#form_id"];
+  $block_id = $operation = $purged_pages = '';
+  switch ($form_id) {
+    case 'block_add_block_form':
+      $operation = EXPIRE_BLOCK_INSERT;
+      $block_id = $form_state["values"]["delta"];
+      break;
+
+    case 'block_admin_configure':
+      $operation = EXPIRE_BLOCK_UPDATE;
+      $block_id = $form_state["values"]["delta"];
+      break;
+
+    case 'block_custom_block_delete':
+      $operation = EXPIRE_BLOCK_DELETE;
+      $block_id = $form_state["values"]["bid"];
+      break;
+
+    case 'block_admin_display_form':
+      $operation = BLOCKS_STRUCTURE_CHANGE;
+      $block_id = NULL;
+      break;
+
+    default:
+      break;
+  }
+  if (variable_get('expire_merge_blocks_settings', EXPIRE_MERGE_BLOCKS_SETTINGS)) {
+    if (!empty($form_state['input']['purged_pages'])) {
+      $purged_pages = $form_state['input']['purged_pages'];
+      $user_input = trim($purged_pages);
+      variable_set("expire_block_{$block_id}", $user_input);
+    }
+    variable_set("expire_block_ct_{$block_id}", $form_state["values"]["purged_nodes_ct"]);
+  }
+  expire_execute_expiration('block', $block_id , $operation);
+}
+
+/**
+ * Helper function to check if path is valid.
+ *
+ * Modification of drupal_valid_path(). Because we don't want to check
+ * path access and allow external URLs.
+ *
+ * @param $path
+ *
+ * @return array|bool
+ */
+function _expire_check_if_valid_path($path) {
+  if ($path == '<front>') {
+    $item = array('access' => TRUE);
+  }
+  elseif (preg_match('/\/\%/', $path)) {
+    // Path is dynamic (ie 'user/%'), so check directly against menu_router table.
+    if ($item = db_query("SELECT * FROM {menu_router} where path = :path", array(':path' => $path))->fetchAssoc()) {
+      $item['link_path']  = $item['path'];
+      $item['link_title'] = $item['title'];
+      $item['external']   = FALSE;
+      $item['options'] = '';
+      _menu_link_translate($item);
+    }
+  }
+  else {
+    $item = menu_get_item($path);
+  }
+  return $item;
+}
+
+/**
+ * Helper function to split string into array by regex expression.
+ *
+ * @param $string
+ *
+ * @return array[]|false|string[]
+ */
+function _expire_array_split($string) {
+  $string = trim($string);
+  return preg_split( '/\r\n|\r|\n/', $string);
+}
+
+/**
+ * Helper function to determine if we need to execute purge operations
+ * for blocks;
+ *
+ * @param $form_id
+ *
+ * @return bool|null
+ */
+function _check_blocks_execution_status($form_id) {
+  $status = variable_get('expire_status', EXPIRE_STATUS_DISABLED);
+  if (!$status) {
+    return FALSE;
+  }
+
+  $enabled_actions = variable_get('expire_block_actions', array());
+  $enabled_actions = array_filter($enabled_actions);
+
+  if (empty($enabled_actions)) {
+    return FALSE;
+  }
+
+  $operation = "";
+  switch ($form_id) {
+    case 'block_add_block_form':
+      $operation = EXPIRE_BLOCK_INSERT;
+      break;
+
+    case 'block_admin_configure':
+      $operation = EXPIRE_BLOCK_UPDATE;
+      break;
+
+    case 'block_custom_block_delete':
+      $operation = EXPIRE_BLOCK_DELETE;
+      break;
+
+    case 'block_admin_display_form':
+      $operation = BLOCKS_STRUCTURE_CHANGE;
+      break;
+
+    default:
+      break;
+  }
+
+  $status = in_array($operation, $enabled_actions);
+  return $status;
+}
+
+/**
+ * Helper function to determine if we need to execute purge operations
+ * for CTs that can be selected in block settings;
+ *
+ * @param string $block_id
+ *
+ * @return string
+ */
+function _check_if_cts_selected($block_id) {
+  $nodes_list = '';
+  $selected_cts = variable_get("expire_block_ct_{$block_id}");
+  foreach ($selected_cts as $key => $content_type) {
+    if ($content_type !== 0) {
+      $query = new EntityFieldQuery();
+      $result = $query->entityCondition('entity_type', 'node')
+        ->entityCondition('bundle', $key)
+        ->execute();
+      if (!empty($result['node'])){
+        foreach ($result['node'] as $node) {
+          $nodes_list .= PHP_EOL . 'node/' . $node->nid;
+        }
+      }
+    }
+  }
+  return $nodes_list;
+}
diff --git a/includes/expire.api.inc b/includes/expire.api.inc
index cd4acc6..31ebf06 100644
--- a/includes/expire.api.inc
+++ b/includes/expire.api.inc
@@ -92,8 +92,13 @@ class ExpireAPI {
 
       // If base site url should be included, then simply add it to the internal paths.
       if ($include_base_url) {
-        foreach ($urls as $internal_path) {
-          $urls[$internal_path] = url($internal_path, array('absolute' => TRUE, 'alias' => TRUE, 'language' => $language));
+        foreach ($urls as $raw_url => $url) {
+          $urls[$raw_url] = url($url['path'], array(
+            'absolute' => TRUE,
+            'alias' => TRUE,
+            'language' => $language,
+            'query' => $url['query'],
+          ));
         }
       }
     }
@@ -101,6 +106,12 @@ class ExpireAPI {
     // Latest possibility to change urls that should be expired.
     drupal_alter('expire_urls', $urls, $object_type, $object);
 
+    // Probably during alteration all urls were deleted. In this case
+    // we should stop any further expiration.
+    if (empty($urls)) {
+      return;
+    }
+
     // Write some debug information.
     self::debugLog($urls, $wildcards, $object_type);
 
@@ -402,8 +413,19 @@ class ExpireAPI {
         $path = implode('|', $path_parts);
       }
 
+      // Parse internal path.
+      $parsed_path = parse_url($path);
+      if (!empty($parsed_path['query'])) {
+        // Parse the query string into array.
+        parse_str($parsed_path['query'], $parsed_path['query']);
+      }
+
       // Collect array with information about expired URLs and its wildcards.
-      $urls[$path] = $path;
+      $urls[$path] = array(
+        'path' => $parsed_path['path'],
+        'query' => !empty($parsed_path['query']) ? $parsed_path['query'] : array(),
+      );
+
       $wildcards[$path] = $wildcard;
 
       // Don't process empty pass, because otherwise drupal will return us
@@ -416,7 +438,10 @@ class ExpireAPI {
       // found.
       $alias = drupal_get_path_alias($path, $langcode);
       if ($alias != $path) {
-        $urls[$alias] = $alias;
+        $urls[$alias] = array(
+          'path' => $alias,
+          'query' => array(),
+        );
         $wildcards[$alias] = $wildcard;
       }
     }
diff --git a/includes/expire.block.inc b/includes/expire.block.inc
new file mode 100644
index 0000000..f811114
--- /dev/null
+++ b/includes/expire.block.inc
@@ -0,0 +1,99 @@
+<?php
+
+/**
+ * @file
+ * Provides class that expires blocks.
+ */
+
+class ExpireBlock implements ExpireInterface {
+
+  /**
+   * Executes expiration actions for blocks.
+   *
+   * @param $block_id
+   *   String with block id.
+   *
+   * @param $action
+   *   Action that has been executed.
+   *
+   * @param $skip_action_check
+   *   Shows whether should we check executed action or just expire node.
+   */
+  function expire($block_id, $action, $skip_action_check = FALSE) {
+    global $theme_key;
+
+    $enabled_actions = variable_get('expire_block_actions', array());
+    $enabled_actions = array_filter($enabled_actions);
+
+    // Stop further expiration if executed action is not selected by admin.
+    if (!in_array($action, $enabled_actions) && !$skip_action_check) {
+      return;
+    }
+
+    $expire_urls = array();
+
+    // Expire front page.
+    $expire_front_page = variable_get('expire_block_front_page', EXPIRE_BLOCK_FRONT_PAGE);
+    if ($expire_front_page) {
+      $expire_urls = ExpireAPI::getFrontPageUrls();
+    }
+
+    // Expire node page.
+    $merge_blocks_settigns = variable_get('expire_merge_blocks_settings', EXPIRE_MERGE_BLOCKS_SETTINGS);
+    if ($merge_blocks_settigns) {
+      $purged_pages = "";
+      switch ($action) {
+        case EXPIRE_BLOCK_INSERT:
+        case EXPIRE_BLOCK_UPDATE:
+          $purged_pages = variable_get("expire_block_{$block_id}");
+          $purged_pages .= _check_if_cts_selected($block_id);
+          break;
+
+        case EXPIRE_BLOCK_DELETE:
+          $purged_pages = variable_get("expire_block_{$block_id}");
+          $purged_pages .= _check_if_cts_selected($block_id);
+          variable_del("expire_block_{$block_id}");
+          variable_del("expire_block_ct_{$block_id}");
+          break;
+
+        case BLOCKS_STRUCTURE_CHANGE:
+          drupal_theme_initialize();
+
+          if (!isset($theme)) {
+            // If theme is not specifically set, rehash for the current theme.
+            $theme = $theme_key;
+          }
+          // Fetch and sort blocks.
+          $blocks = block_admin_display_prepare_blocks($theme);
+          $purged_pages = '';
+          foreach ($blocks as $key => $block) {
+            $block_id = $block['delta'];
+            $block_purged_path = variable_get("expire_block_{$block_id}", '');
+            if (!empty($block_purged_path)) {
+              $purged_pages .= PHP_EOL . $block_purged_path;
+            }
+          }
+          break;
+
+        default:
+          break;
+      }
+      $custom_settings = _expire_array_split($purged_pages);
+      $expire_urls = array_merge($expire_urls, $custom_settings);
+    }
+
+    // Expire custom pages.
+    $expire_custom = variable_get('expire_block_custom', EXPIRE_BLOCK_CUSTOM);
+    if ($expire_custom) {
+      $expire_custom_pages = variable_get('expire_block_custom_pages');
+      $expire_custom_pages =  _expire_array_split($expire_custom_pages);
+      $expire_urls = array_merge($expire_urls, $expire_custom_pages);
+    }
+    // Flush page cache for expired urls.
+    // Only submit the paths if they really contain something.
+    ExpireAPI::executeExpiration($expire_urls);
+    if (count($expire_urls) && module_enable(['acquia_purge'])) {
+      _acquia_purge_service()->addPaths($expire_urls);
+    }
+  }
+}
diff --git a/includes/expire.taxonomy_term.inc b/includes/expire.taxonomy_term.inc
new file mode 100644
index 0000000..2f0b245
--- /dev/null
+++ b/includes/expire.taxonomy_term.inc
@@ -0,0 +1,88 @@
+<?php
+
+/**
+ * @file
+ * Provides class that expires taxonomy terms.
+ */
+
+class ExpireTaxonomyTerm implements ExpireInterface {
+
+  /**
+   * Executes expiration actions for taxonomy term.
+   *
+   * @param $taxonomy_term
+   *   Taxonomy term object.
+   *
+   * @param $action
+   *   Action that has been executed.
+   *
+   * @param $skip_action_check
+   *   Shows whether should we check executed action or just
+   *   expire taxonomy term.
+   */
+  function expire($taxonomy_term, $action, $skip_action_check = FALSE) {
+
+    if (empty($taxonomy_term->tid) || empty($taxonomy_term->vocabulary_machine_name)) {
+      return;
+    }
+
+    // See if cache settings was overridden for this
+    // taxonomy_term vocabulary_machine_name.
+    $settings_overridden = variable_get('expire_taxonomy_term_override_defaults_' . $taxonomy_term->vocabulary_machine_name);
+
+    $variable_suffix = '';
+    if (!empty($settings_overridden)) {
+      // If page cache settings was overridden for this taxonomy_term
+      // vocabulary_machine_name we should add
+      // "[taxonomy_term-VOCABULARY_MACHINE_NAME]" to every variable name
+      // we use here.
+      $variable_suffix = '_' . $taxonomy_term->vocabulary_machine_name;
+    }
+
+    $enabled_actions = variable_get('expire_taxonomy_term_actions' . $variable_suffix, array());
+    $enabled_actions = array_filter($enabled_actions);
+
+    // Stop further expiration if executed action is not selected by admin.
+    if (!in_array($action, $enabled_actions) && !$skip_action_check) {
+      return;
+    }
+
+    $expire_urls = array();
+
+    // Expire front page.
+    $expire_front_page = variable_get('expire_taxonomy_term_front_page' . $variable_suffix, EXPIRE_TAXONOMY_TERM_FRONT_PAGE);
+    if ($expire_front_page) {
+      $expire_urls = ExpireAPI::getFrontPageUrls();
+    }
+
+    // Expire taxonomy_term page.
+    $expire_taxonomy_term_page = variable_get('expire_taxonomy_term_taxonomy_term_page' . $variable_suffix, EXPIRE_TAXONOMY_TERM_TAXONOMY_TERM_PAGE);
+    if ($expire_taxonomy_term_page) {
+      $expire_urls['taxonomy_term-' . $taxonomy_term->tid] = 'taxonomy/term/' . $taxonomy_term->tid;
+    }
+
+    // Expire taxonomy_term reference's pages.
+    $expire_taxonomy_term_references = variable_get('expire_taxonomy_term_reference_pages' . $variable_suffix, EXPIRE_TAXONOMY_TERM_REFERENCE_PAGES);
+    if ($expire_taxonomy_term_references) {
+      $urls = ExpireAPI::expireTermPages($taxonomy_term, 'taxonomy_term');
+      $expire_urls = array_merge($expire_urls, $urls);
+      if (module_exists('node_reference') || module_exists('user_reference') || module_exists('entityreference')) {
+        $traverse_field_collection = module_exists('field_collection') && variable_get('expire_taxonomy_term_reference_field_collection_pages' . $variable_suffix, EXPIRE_TAXONOMY_TERM_REFERENCE_FC_PAGES);
+        $urls = ExpireAPI::expireReferences($taxonomy_term, 'taxonomy_term', $traverse_field_collection);
+        $expire_urls = array_merge($expire_urls, $urls);
+      }
+    }
+
+    // Expire custom pages.
+    $expire_custom = variable_get('expire_taxonomy_term_custom' . $variable_suffix, EXPIRE_TAXONOMY_TERM_CUSTOM);
+    if ($expire_custom) {
+      $pages = variable_get('expire_taxonomy_term_custom_pages' . $variable_suffix);
+      $urls = ExpireAPI::expireCustomPages($pages, array('taxonomy_term' => $taxonomy_term));
+      $expire_urls = array_merge($expire_urls, $urls);
+    }
+
+    // Flush page cache for expired urls.
+    ExpireAPI::executeExpiration($expire_urls, 'taxonomy_term', $taxonomy_term);
+  }
+
+}
diff --git a/js/expire.admin.js b/js/expire.admin.js
index 346f966..02474ee 100644
--- a/js/expire.admin.js
+++ b/js/expire.admin.js
@@ -6,11 +6,13 @@
       $('fieldset#edit-expire', context).drupalSetSummary(function(context) {
         var vals = [];
 
-        if ($('#edit-expire-node-override-defaults', context).is(':checked')) {
-          vals.push(Drupal.t('Node expiration: settings are overriden'));
-        }
-        else {
-          vals.push(Drupal.t('Node expiration: default settings'));
+        if ($('#edit-expire-node-override-defaults', context).length) {
+          if ($('#edit-expire-node-override-defaults', context).is(':checked')) {
+            vals.push(Drupal.t('Node expiration: settings are overriden'));
+          }
+          else {
+            vals.push(Drupal.t('Node expiration: default settings'));
+          }
         }
 
         if ($('#edit-expire-comment-override-defaults', context).length) {
@@ -22,6 +24,15 @@
           }
         }
 
+        if ($('#edit-expire-taxonomy-term-override-defaults', context).length) {
+          if ($('#edit-expire-taxonomy-term-override-defaults', context).is(':checked')) {
+            vals.push(Drupal.t('Taxonomy term expiration: settings are overriden'));
+          }
+          else {
+            vals.push(Drupal.t('Taxonomy term expiration: default settings'));
+          }
+        }
+
         return vals.join(', ');
       });
 
